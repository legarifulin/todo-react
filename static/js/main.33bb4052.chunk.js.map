{"version":3,"sources":["components/ToDo.js","components/ToDoForm.js","images/background.png","App.js","reportWebVitals.js","index.js"],"names":["ToDo","todo","toggleTask","removeTask","className","complete","onClick","id","task","ToDoForm","addTask","useState","userInput","setUserInput","handleSubmit","e","preventDefault","onSubmit","value","type","onChange","currentTarget","onKeyDown","key","placeholder","App","todos","setTodos","filter","handleToggle","map","length","src","logo","alt","newItem","Math","random","toString","substr","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qNAceA,EAdF,SAAC,GAAoC,IAAnCC,EAAkC,EAAlCA,KAAMC,EAA4B,EAA5BA,WAAYC,EAAgB,EAAhBA,WAC7B,OACI,sBAAqBC,UAAY,YAAjC,UACI,qBAAKA,UAAaH,EAAKI,SAAW,mBAAqB,YACvDC,QAAW,kBAAMJ,EAAWD,EAAKM,KADjC,SAEKN,EAAKO,OAEV,qBAAKJ,UAAY,cAAcE,QAAW,kBAAMH,EAAWF,EAAKM,KAAhE,iBALQN,EAAKM,KCwCVE,G,MAxCE,SAAC,GAAe,IAAdC,EAAa,EAAbA,QACf,EAAiCC,mBAAS,IAA1C,mBAAOC,EAAP,KAAiBC,EAAjB,KAOEC,EAAe,SAACC,GAClBA,EAAEC,iBACFN,EAAQE,GACRC,EAAa,KAUb,OACI,sBAAKT,UAAU,WAAf,UACA,0CACA,uBAAMa,SAAUH,EAAhB,UACI,uBACII,MAASN,EACTO,KAAO,OACPC,SAxBK,SAACL,GAClBF,EAAaE,EAAEM,cAAcH,QAwBjBI,UAfO,SAACP,GACP,UAAVA,EAAEQ,KACDT,EAAaC,IAcLS,YAAc,kBAElB,qBAAKpB,UAAU,MAAf,SACA,oDCnCG,MAA0B,uCCsD1BqB,MAhDf,WACA,MAAyBd,mBAAS,IAAlC,mBAAOe,EAAP,KAAaC,EAAb,KAaMxB,EAAa,SAACI,GAClBoB,EAAS,YAAID,EAAME,QAAO,SAAC3B,GAAD,OAAUA,EAAKM,KAAOA,QAG5CsB,EAAe,SAACtB,GACpBoB,EAAQ,YACHD,EAAMI,KAAI,SAAC7B,GAAD,OACbA,EAAKM,KAAOA,EAAZ,2BAAqBN,GAArB,IAA2BI,UAAWJ,EAAKI,WAA3C,eAA2DJ,SAK7D,OACE,sBAAKG,UAAU,MAAf,UACE,iCACE,6CAAgBsB,EAAMK,OAAtB,SAEF,qBAAK3B,UAAU,iBAAf,SACE,qBAAK4B,IAAKC,EAAMC,IAAI,eAEtB,cAAC,EAAD,CAAUxB,QA/BA,SAACE,GACf,GAAGA,EAAW,CACZ,IAAMuB,EAAU,CACd5B,GAAI6B,KAAKC,SAASC,SAAS,IAAIC,OAAO,EAAE,GACxC/B,KAAMI,EACNP,UAAU,GAEZsB,EAAS,GAAD,mBAAKD,GAAL,CAAYS,SAyBjBT,EAAMI,KAAI,SAAC7B,GACV,OACE,cAAC,EAAD,CACAA,KAAQA,EAERC,WAAY2B,EACZ1B,WAAcA,GAFPuB,EAAMnB,WCjCRiC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCFdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.33bb4052.chunk.js","sourcesContent":["const ToDo = ({todo, toggleTask, removeTask}) => {\r\n    return (\r\n        <div key = {todo.id} className = 'item-todo'>\r\n            <div className = {todo.complete ? 'item-text strike' : 'item-text'}\r\n            onClick = {() => toggleTask(todo.id)}>\r\n                {todo.task}\r\n            </div>\r\n            <div className = 'item-delete' onClick = {() => removeTask(todo.id)}>\r\n                X\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDo;","import {useState} from 'react';\r\n\r\nconst ToDoForm = ({addTask}) => {\r\n    const [userInput,setUserInput] = useState('')\r\n\r\n\r\nconst handleChange = (e) => {\r\n    setUserInput(e.currentTarget.value)\r\n\r\n}    \r\nconst handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    addTask(userInput);\r\n    setUserInput('')\r\n}\r\n\r\nconst handleKeyPress = (e) => {\r\n    if(e.key === 'Enter') {\r\n        handleSubmit(e)\r\n    }\r\n}\r\n\r\n\r\n    return (\r\n        <div className='new-todo'>\r\n        <h2>New Todo</h2>\r\n        <form onSubmit={handleSubmit}>\r\n            <input\r\n                value = {userInput}\r\n                type = 'text'\r\n                onChange = {handleChange}\r\n                onKeyDown = {handleKeyPress}\r\n                placeholder = 'Need to do...'\r\n            />\r\n            <div className='btn'>\r\n            <button>Save</button>\r\n            </div>\r\n        </form>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ToDoForm;","export default __webpack_public_path__ + \"static/media/background.79638e9a.png\";","import { useState } from 'react';\r\nimport ToDo from './components/ToDo';\r\nimport './css/main.css';\r\nimport ToDoForm from './components/ToDoForm';\r\nimport logo from './images/background.png';\r\n\r\nfunction App() {\r\nconst [todos,setTodos] = useState([]);\r\n\r\nconst addTask = (userInput) => {\r\n  if(userInput) {\r\n    const newItem = {\r\n      id: Math.random().toString(36).substr(2,9),\r\n      task: userInput,\r\n      complete: false\r\n    }\r\n    setTodos([...todos, newItem])\r\n  }\r\n}\r\n\r\nconst removeTask = (id) => {\r\n  setTodos([...todos.filter((todo) => todo.id !== id)])\r\n}\r\n\r\nconst handleToggle = (id) => {\r\n  setTodos ([\r\n    ...todos.map((todo) =>\r\n    todo.id === id ? {...todo, complete: !todo.complete} : {...todo}\r\n    )\r\n  ])\r\n}\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header>\r\n        <h1>Todo List: {todos.length} </h1>\r\n      </header>\r\n      <div className='background-img'>\r\n        <img src={logo} alt=\"backgpng\"/>\r\n      </div>\r\n      <ToDoForm addTask={addTask} />\r\n      {todos.map((todo) => {\r\n        return (\r\n          <ToDo \r\n          todo = {todo}\r\n          key = {todos.id}\r\n          toggleTask={handleToggle}\r\n          removeTask = {removeTask} />\r\n        )\r\n      })}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}